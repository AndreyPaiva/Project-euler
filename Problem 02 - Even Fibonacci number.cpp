/*Project Euler - Problem 2: Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.

Author: Andrey Paiva
October 27th of 2021*/

#include <iostream>
#include <cstdlib>

using namespace std;

int main(void){
    long int sum = 0; //sum of the even fibonacci numbers, starting with the first even, 2
    long int fibonacci[3] = {1,2,0}; //the first 2 terms are 1 and 2, the 3th term is a placeholder

    do{
        fibonacci[2] = fibonacci[0] + fibonacci[1]; //the last value in the array is the sum of the previous 2 numbers in the array
        if(fibonacci[1] % 2 == 0){ //if the number is even, add it to the sum           
            sum += fibonacci[1];
        }
        fibonacci[0] = fibonacci[1]; //the first number in the array is deleted and the second number turns into the first
        fibonacci[1] = fibonacci[2]; //the third number in the array turns into the second
    }while(fibonacci[1] < 4000000); //do it until the last number in the sequence is the biggest fibonacci number less than 4000000

    cout << "The sum of the Fibonacci numbers lower than 4000000 is " << sum << "." << endl; //show the sum
    system("pause");
    return 0;
}